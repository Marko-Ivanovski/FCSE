import java.util.Scanner;

public class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E element, SLLNode<E> succ) {
        this.element = element;
        this.succ = succ;
    }
}
class SLL<E>{
    private SLLNode<E> first;

    public SLL(){
        this.first=null; //Empty list
    }
    public void insertFirst(E o){
        SLLNode<E> ins = new SLLNode<E>(o, null);
        ins.succ=first;
        first=ins;
    }
    public void insertAfter(E o, SLLNode<E> node){
        if(node!=null){
            SLLNode<E> ins=new SLLNode<E>(o, node.succ);
            node.succ=ins;
        }
        else{
            System.out.println("The given element is null.");
        }
    }
    public void insertBefore(E o, SLLNode<E> before){
        if(first!=null){
            SLLNode<E> temp=first;
            if(first==before){
                this.insertFirst(o);
                return;
            }
            //first!=before
            while(temp.succ!=before && temp.succ!=null){
                temp=temp.succ;
            }
            if(temp.succ==before){
                temp.succ=new SLLNode<E>(o, before);
            }
            else{
                System.out.println("The element doesn't exist in the list.");
            }
        }
    }
    public void insertLast(E o){
        if(first!=null){
            SLLNode<E> temp = first;
            while(temp.succ!=null){
                temp=temp.succ;
            }
            temp.succ=new SLLNode<E>(o, null);
        }
        else{
            insertFirst(o);
        }
    }
    public E deleteFirst(){
        if(first!=null){
            SLLNode<E> temp=first;
            first=first.succ;
            return temp.element;
        }
        else{
            System.out.println("The list is empty.");
            return null;
        }
    }
    public E delete(SLLNode<E> node){
        if(first!=null){
            SLLNode<E> temp = first;
            if(first==node){
                return this.deleteFirst();
            }
            while (temp.succ!=node && temp.succ.succ !=null){
                temp=temp.succ;
            }
            if(temp.succ==node){
                temp.succ=temp.succ.succ;
                return node.element;
            }
            else{
                System.out.println("The element doesn't exist in the list.");
                return null;
            }
        }
        else{
            System.out.println("The list is empty.");
            return null;
        }
    }
    public SLLNode<E> find(E o){
        if (first!=null){
            SLLNode<E> temp = first;
            while(!temp.element.equals(o) && temp.succ!=null){
                temp=temp.succ;
            }
            if(temp.element.equals(o)){
                return temp;
            }
            else {
                System.out.println("The element doesn't exist in the list.");
            }
        }
        else{
            System.out.println("The list is empty.");
        }
        return null;
    }
    public int size(){
        int listSize = 0;
        SLLNode<E> temp = first;
        while(temp!=null){
            listSize++;
            temp=temp.succ;
        }
        return listSize;
    }
    public void merge(SLL<E> in){
        if (first!=null){
            SLLNode<E> temp =first;
            while (temp.succ!=null){
                temp=temp.succ;
            }
            temp.succ=in.first;
        }
        else{
            first=in.first;
        }
    }

    public static void main(String[] args) {
        SLL<Integer> list = new SLL<Integer>();

        list.insertLast(5); // Inserts element 5 as the last element (5)
        System.out.println(list.toString());

        list.insertFirst(3); // Inserts element 3 as the first element (3->5)
        System.out.println(list.toString());

        list.insertLast(1); // Inserts element 1 as the last element (3->5->1)
        list.insertLast(1); // Inserts element 1 as the last element (3->5->1->1)
        System.out.println(list.toString());

        list.deleteFirst(); // Deletes the first element (5->1->1)
        System.out.println(list.toString());

        SLLNode<Integer> temp = list.find(5);
        list.insertBefore(2,temp); // Places element 2 before element 5 (2->5->1->1)
        System.out.println(list.toString());

        temp = list.find(1);
        list.insertAfter(3, temp); //Places element 3 after element 1 (2->5->1->3->1)
        System.out.println(list.toString());

        System.out.println("The list: " + list.size());
        System.out.println("Mirrored list: ");
        list.mirror();
        }
    }
}
