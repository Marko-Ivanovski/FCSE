class DLLNode<E>{
        protected E element;
        protected DLLNode<E> pred;
        protected DLLNode<E> succ;

        public DLLNode(E element, DLLNode<E> pred, DLLNode<E> succ){
            this.element=element;
            this.pred=pred;
            this.succ=succ;
        }
    }
    class DLL<E>{
        private DLLNode<E> first;
        private DLLNode<E> last;

        public DLL(){    //Empty list
            this.first=null;
            this.last=null;
        }

        public void insertFirst(E o){
            DLLNode<E> ins = new DLLNode<E>(o, null, first);
            if(first==null){
                last=ins;
            } else {
                first.pred=ins;
            }
            first=ins;
        }
        public void insertLast(E o){
            if(first==null){
                insertFirst(o);
            } else {
                DLLNode<E> ins = new DLLNode<E>(o, last, null);
                last.succ=ins;
                last=ins;
            }
        }
        public void insertAfter(E o, DLLNode<E> after){
            if(after==last){
                insertLast(o);
                return;
            }
            DLLNode<E> ins = new DLLNode<E>(o, after, after.succ);
            after.succ.pred=ins;
            after.succ=ins;
        }
        public void insertBefore(E o, DLLNode<E> before){
            if(before==last){
                insertFirst(o);
                return;
            }
            DLLNode<E> ins = new DLLNode<E>(o, before.pred, before);
            before.pred.succ=ins;
            before.pred=ins;
        }
        public E deleteFirst(){
            if(first!=null){
                DLLNode<E> temp = first;
                first=first.succ;
                if(first!=null){
                    first.pred=null;
                }
                if(first==null){
                    last=null;
                }
                return temp.element;
            }
            else {
                return null;
            }
        }
        public E deleteLast(){
            if(first!=null){
                if(first.succ==null){
                    return deleteFirst();
                } else {
                    DLLNode<E> temp = last;
                    last=last.pred;
                    last.succ=null;
                    return temp.element;
                }
            } else {
                return null;
            }
        }
        public E delete(DLLNode<E> node){
            if(node==first){
                return deleteFirst();
            }
            if(node==last){
                return deleteLast();
            }
            node.pred.succ=node.succ;
            node.succ.pred=node.pred;
            return node.element;
        }
        public DLLNode<E> find(E o){
            if(first!=null){
                DLLNode<E> temp=first;
                while (!temp.element.equals(o) && temp.succ!=null){
                    temp=temp.succ;
                }
                if (temp.element.equals(o)){
                    return temp;
                } else {
                    System.out.println("The element doesn't exist in the list.");
                }
            } else {
                System.out.println("The list is empty.");
            }
            return null;
        }
        public void deleteList(){
            first=null;
            last=null;
        }
        public int getSize(){
            int listSize=0;
            DLLNode<E> temp = first;
            while(temp!=null){
                listSize++;
                temp=temp.succ;
            }
            return listSize;
        }

    public static void main(String[] args) {
        DLL<Integer> lista = new DLL<Integer>();
        lista.insertLast(5);
        System.out.print("Listata po vmetnuvanje na 5 kako posleden element: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());

        lista.insertFirst(3);
        System.out.print("Listata po vmetnuvanje na 3 kako prv element: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());
        lista.insertLast(1);
        System.out.print("Listata po vmetnuvanje na 1 kako posleden element: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());
        lista.deleteFirst();
        System.out.print("Listata po brishenje na prviot element: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());

        DLLNode<Integer> pom = lista.find(5);
        lista.insertBefore(2, pom);
        System.out.print("Listata po vmetnuvanje na elementot 2 pred elementot 5: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());

        pom = lista.find(1);
        lista.insertAfter(3, pom);
        System.out.print("Listata po vmetnuvanje na elementot 3 posle elementot 1: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());

        pom = lista.find(1);
        lista.insertAfter(6, pom);
        System.out.print("Listata po vmetnuvanje na elementot 6 posle elementot 1: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());

        pom = lista.find(3);
        lista.delete(pom);
        System.out.print("Listata po brishenje na elementot 3: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());
        System.out.println("Momentalna dolzina na listata: "+lista.getSize());
        lista.deleteList();
        System.out.print("Pecatenje na listata po nejzino brishenje: ");
        System.out.println(lista.toString()+" i obratno "+lista.toString());
        System.out.println("Momentalna dolzina na listata: "+lista.getSize());

    }
}
